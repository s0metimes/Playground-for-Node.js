2018-01-17 09:nn:22.651 +0900 - info: 라인 1 : # node.js 에서 file을 핸들링하는 방법

2018-01-17 09:nn:22.655 +0900 - info: 라인 2 : 

2018-01-17 09:nn:22.657 +0900 - info: 라인 3 : file을 핸들링하는 방법에 대해 다룹니다.

2018-01-17 09:nn:22.657 +0900 - info: 라인 4 : 

2018-01-17 09:nn:22.659 +0900 - info: 라인 5 : *   파일 업로드, 다운로드, 보기.

2018-01-17 09:nn:22.662 +0900 - info: 라인 6 : *   로그를 파일로 만들고 유저가 조회 가능하도록 하기.

2018-01-17 09:nn:22.662 +0900 - info: 라인 7 : 

2018-01-17 09:nn:22.664 +0900 - info: 라인 8 : ### 파일 한줄씩 읽어들여서 console.log 출력하기

2018-01-17 09:nn:22.664 +0900 - info: 라인 9 : 

2018-01-17 09:nn:22.665 +0900 - info: 라인 10 : 타언어에 익숙해져 있다면 상당히 어려울 수 있습니다.

2018-01-17 09:nn:22.665 +0900 - info: 라인 11 : 

2018-01-17 09:nn:22.668 +0900 - info: 라인 12 : Node.js 는 파일 읽기가 한글자씩 읽어오는 함수가 api 로 제공되고 있지 않은데 (제가 못찾은거일수도 있습니다),

2018-01-17 09:nn:22.670 +0900 - info: 라인 13 : 평소 한줄씩 읽어올 때 모두 한글자씩 읽어들이는 함수로 구현을 했기에 많이 당황했습니다.

2018-01-17 09:nn:22.670 +0900 - info: 라인 14 : 

2018-01-17 09:nn:22.693 +0900 - info: 라인 15 : Node.js 에서는 readline 이라는 모듈을 사용하면 파일에서 한줄씩 읽어들이는 코드 구현에 대해

2018-01-17 09:nn:22.694 +0900 - info: 라인 16 : 간단하게 해결 가능합니다.

2018-01-17 09:nn:22.694 +0900 - info: 라인 17 : 

2018-01-17 09:nn:22.696 +0900 - info: 라인 18 : documentation 은 이미 정의된 event 들과 함수들로 기술돼있습니다.

2018-01-17 09:nn:22.698 +0900 - info: 라인 19 : 어떤 event 가 발생 했을 때 어떤 기능을 넣어줘야 되는지를 작성하는 방식으로 코드를 짜는게 포인트입니다.

2018-01-17 09:nn:22.698 +0900 - info: 라인 20 : 

2018-01-17 09:nn:22.700 +0900 - info: 라인 21 : node.js 의 빠른 생산성의 포인트는 이미 있는 자원(모듈)을 얼마나 잘 활용하는가에 달렸습니다.

2018-01-17 09:nn:22.702 +0900 - info: 라인 22 : 원리 이해와 알고리즘적 사고를 통한 코드 구현도 중요하나, 이미 구현돼있는 것은 빠르게 사용해서 구현하자 라는 것이

2018-01-17 09:nn:22.703 +0900 - info: 라인 23 : node.js 의 취지라고 생각합니다.

2018-01-17 09:nn:22.705 +0900 - info: 라인 24 : 머리 써서 고민하고 해결 방안을 도출하는 문제를 겪고 싶다면 해킹문제풀이나 알고리즘 문제를 푸는 방향으로 합시다.

